[notation: ‘=‘ universal, ‘+’ m+m manager, ‘*’ m+m, ‘@‘ manual, ‘-‘ m+m service]

= use selected inclusion of ODEnableLogging/ODLogging, ODDisableLogging/ODLogging to bracket code that needs to be logged

* change signal handling to use platform-neutral mechanisms

+ on dragging, do an adjustSize() without repaint?

+ if a connection is made outside of the viewer / manager, make sure that a repaint is triggered, not just for a new entity

- (Python, Lua) services

* integrate Arduino sensors via Linux-based Arduino boards? SmartTag via TouchShare?

- Tunnel Service and Client need to be bidirectional (use nonblocking I/O?)

* m+m input, output and filter services as Max objects - parameters of endpoint, port, tag and one input, one output or both, with wildcard protocols

- check if the SpiderMonkey library can be statically linked on Windows and if this resolves the exit issue; if so, check if it can be statically linked on OS X

= to determine whether a Windows executable is 32-bit or 64-bit, do “c:\Program Files (x86)\Microsoft Visual Studio 12.0\vc\bin\dumpbin.exe /headers the-program-file.exe”

+ configuration file should have ‘enabled’, ‘name’, ‘arguments’, where ‘enabled’ is 0 if disabled, non-0 if enabled, ‘name’ is the executable name, et cetera - tab-separated

+ ‘load’ a configuration brings up the configuration editor, with a ‘start’ button, ‘edit’ a configuration, ‘save’ a configuration

+ regular input ports can’t be monitored; regular output ports and clients can use a ‘vampire’ channel to trigger a blinking monitor and services / adapters can monitor all their channels, reporting via a new response that a change has occurred - this should be sent by m+m manager, so that non-monitored services are not impacted

+ only output channels can have displays attached

@ to generate the correct dimensions for images in the m+m manager manual, set SETTINGS_FOR_MANUAL in ContentPanel.h to TRUE before running m+m manager - this locks the window size and prevents dragging of entities

* for configurations, we need to know if the service / adapter is running on the same system as m+m manager, so that it is possible to relaunch it later or if the service / adapter is ‘system-independent’ so that it can be launched anywhere; input and output services will usually be ‘system-dependent’, as they connect to physical devices - however, filters are not usually ‘system-dependent’; note that some regular services, like the movement database service, _might_ be ‘system-dependent’, depending on how they access their resources

* note that the ‘system-independent’ attribute must be provided by every service and adapter - probably as part of the application information - while the ‘running on same system as m+m manager’ is a run-time quality, so best captured when the arguments are retrieved from the service / adapter

* note that only services and adapters can be recorded in a configuration: YARP endpoints and m+m clients can’t be launched from m+m manager, except for monitor ports or internally-provided input ports - if these are implemented - and all connections to the services and adapters must be recorded

= files that are (mostly) edited on Windows need to be processed by ‘dos2unix’ and, possibly, checked for overlong lines using “CheckLength 100 .”

* if some of the optional arguments to a service are supplied - required must have already been satisfied - then launching the service should do a validate / configure, setting the ‘configured’ flag, so that the ‘b’ command doesn’t ask for the arguments again; the ‘-g’ option only needs to be used if the default arguments are fine

* every service has a hidden ‘pong’ UDP port that sends activity message to managers; frequency of update is a global constant - use Absorber service as a prototype - flags for each input and output port, so all m+m channels can be reported, not just output ports; maybe some form of compressed encodings

- implement ECL on Windows - perhaps try cygwin?
