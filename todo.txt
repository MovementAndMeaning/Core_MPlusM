[notation: ‘=‘ universal, ‘+’ channel manager, ‘*’ M+M, ‘@‘ manual]

= use selected inclusion of ODEnableLogging/ODLogging, ODDisableLogging/ODLogging to bracket code that needs to be logged

* change signal handling to use platform-neutral mechanisms

+ on dragging, do an adjustSize() without repaint?

+ if a connection is made outside of the viewer / manager, make sure that a repaint is triggered, not just for a new entity

* ‘touchShare’ protocol with iOS devices?

* Python, Lua, Tcl (, Common Lisp?) services

* integrate Arduino sensors via Linux-based Arduino boards? SmartTag via TouchShare?

* Tunnel Service and Client need to be bidirectional (use nonblocking I/O?)

- check if the SpiderMonkey library can be statically linked on Windows and if this resolves the exit issue; if so, check if it can be statically linked on OS X

= to determine whether a Windows executable is 32-bit or 64-bit, do “c:\Program Files (x86)\Microsoft Visual Studio 12.0\vc\bin\dumpbin.exe /headers the-program-file.exe”

@ add appendix about setting up Hamachi for use with M+M

+ configuration file should have ‘enabled’, ‘name’, ‘arguments’, where ‘enabled’ is 0 if disabled, non-0 if enabled, ‘name’ is the executable name, et cetera - tab-separated

+ ‘load’ a configuration brings up the configuration editor, with a ‘start’ button, ‘edit’ a configuration, ‘save’ a configuration

@ DOCUMENT the new dialog boxes! Appendix - What happens when YARP is not running, when Registry Service is not running

—> all required arguments _must_ appear before all the optional arguments - ignore an executable that doesn’t obey this - and an executable that has only optional arguments can be launched immediately; only optional values should have default values

+ make sure that the initial placement of entities is within the visible area - below the menu bar and above the bottom

* add a ‘port argument’ descriptor, that checks for 1024 <= v <= 65535 or 0 <= v <= 65535, depending on a boolean flag

+ the configuration file can’t include adapters, as there’s no mechanism to get their launch parameters; services need to respond to a new request that returns their original launch parameters, so that these can be recorded

* empty optional arguments in the GUI should be filled in with their default values before launch, and empty mandatory arguments should be reported

* adapters are input/output services that are also clients??? [this way they can be interrogated, so they can be configured]
