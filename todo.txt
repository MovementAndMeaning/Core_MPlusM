[notation: ‘=‘ universal, ‘+’ channel manager, ‘*’ M+M, ‘@‘ manual]

= use selected inclusion of ODEnableLogging/ODLogging, ODDisableLogging/ODLogging to bracket code that needs to be logged

* change signal handling to use platform-neutral mechanisms

+ on dragging, do an adjustSize() without repaint?

+ if a connection is made outside of the viewer / manager, make sure that a repaint is triggered, not just for a new entity

* ‘touchShare’ protocol with iOS devices?

* Python, Lua, Tcl (, Common Lisp?) services

* integrate Arduino sensors via Linux-based Arduino boards? SmartTag via TouchShare?

* Tunnel Service and Client need to be bidirectional (use nonblocking I/O?)

- check if the SpiderMonkey library can be statically linked on Windows and if this resolves the exit issue; if so, check if it can be statically linked on OS X

= to determine whether a Windows executable is 32-bit or 64-bit, do “c:\Program Files (x86)\Microsoft Visual Studio 12.0\vc\bin\dumpbin.exe /headers the-program-file.exe”

+ configuration file should have ‘enabled’, ‘name’, ‘arguments’, where ‘enabled’ is 0 if disabled, non-0 if enabled, ‘name’ is the executable name, et cetera - tab-separated

+ ‘load’ a configuration brings up the configuration editor, with a ‘start’ button, ‘edit’ a configuration, ‘save’ a configuration

* empty optional arguments in the GUI should be filled in with their default values before launch, and empty mandatory arguments should be reported

+ regular input ports can’t be monitored; regular output ports and clients can use a ‘vampire’ channel to trigger a blinking monitor and services / adapters can monitor all their channels, reporting via a new response that a change has occurred - this should be sent by Channel Manager, so that non-monitored services are not impacted

+ only output channels can have displays attached

@ to generate the correct dimensions for the Channel Manager manual, set SETTINGS_FOR_MANUAL in ContentPanel.h to TRUE before running Channel Manager - this locks the window size and prevents dragging of entities

+ file arguments should support file selection dialogs

+ placeholder argument descriptor for ‘…’, i.e. zero or more additional arguments, unchecked - and Channel Manager should have a mechanism to handle this

* port argument descriptor should use min/max of integer argument descriptor

+ don’t need to keep button pointers as TextButton pointers; use a vector of components, its size will be a flag for remove

+ use an enumeration for the button values

+ the ‘extra’ section should use a title from the extra argument descriptor; ignore all extra argument descriptors after the first

* exemplar out - check if it needs to be updated to match the Record ZZZ output services

@ update the JavaScript launch image to reflect the new fields
