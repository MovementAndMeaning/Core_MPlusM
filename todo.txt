[notation: ‘=‘ universal, ‘+’ service viewer / channel manager, ‘*’ M+M, ‘@‘ manual]

= use selected inclusion of ODEnableLogging/ODLogging, ODDisableLogging/ODLogging to bracket code that needs to be logged

+ use the new ‘install’ target for OGDF!
[do a make cleanrelease && make release, make cleandebug && make debug, this will build libOGDF.a in
_release and _debug]

+ for ACE - after building, do a ‘sudo sh’ for installing - and make sure to do ‘export ACE_ROOT=$(pwd)’ and ‘export DYLD_LIBRARY_PATH=????:$DYLD_LIBRARY_PATH’ if the install directory is not /usr/local

+ for YARP - unset ACE_ROOT before doing a fresh ‘ccmake ..’, so that the /opt/M+M files will be picked, not the ACE_ROOT ones

* for JavaScript - cd …/gecko/js/src; autoconf213; cd build_OPT.OBJ; ../configure --prefix=/opt/M+M/gecko --with-system-icu; make; sudo make install; sudo cp js/src/js-config.h /opt/M+M/gecko/include/mozjs-37a1 

* change signal handling to use platform-neutral mechanisms

+ on dragging, do an adjustSize() without repaint?

+ if a connection is made outside of the viewer / manager, make sure that a repaint is triggered, not just for a new entity

** javascript should support thread _or_ input handler

a) work out how to do the reverse - calling into the loaded JavaScript code and retrieving values from the JavaScript environment
b) have the service code validate loaded code to make sure that it can be used

d) have the JavaScript code handle an input stream
e) have the JavaScript code generate an output stream from its input
f) add support for an output-only script - that is, it will be running more-or-less continuously in a thread, generating output


—> add argv[] to global object, as early as possible
—> change tag order (tag:script) to match stream order (script/tag/)
—> add handler function to stream description object, for inlets (ie., name: ‘’, …, handler: inHandler)
—> return handler vector, parallel with ChannelVector, for inlets; don’t need for outlets
—> if the scriptInlets is a function object, invoke it to get the list, so that scripts like ‘mergeInlets.js’ can be created - the number of inlets could be a command-line argument!
