[notation: ‘=‘ universal, ‘+’ service viewer / channel manager, ‘*’ M+M]

= use selected inclusion of ODEnableLogging/ODLogging, ODDisableLogging/ODLogging to bracket code that needs to be logged

+ use ‘yarp clean —timeout 3’ logic for port exploration or send the ‘clean’ command to yarp before scanning

+ when copying OGDF files into /usr/local/* from _release, use ‘cp -rp’ so that permissions will allow reading!
[_release/libOGDF.a goes to /usr/local/lib, ogdf/* goes to /usr/local/include]; note that the linker has some issues with OGDF

+ load/save positions, by entity name [optional???]

* change signal handling to use platform-neutral mechanisms

Notes from Johnty:

- in terms of having a background thread communicate with the GUI elements, here's the basic outline i followed:

- - i inherited from ChangeListener and had the thread class inherit from ChangeBroadcaster. 

- - then i made a callback for in the GUI class to force an draw update (repaint) on the GUI elements, and triggered a change in the thread class when an event occurs

-- finally, add the GUI class as a listener to the thread using addChangeListener()

- - in terms of synchronisation, i used a basic non-reentrant lock for synchronisation of the shared memory access between the thread and the gui. 

wohoo! See attached screenshot.

(Had to temporarily comment out the yarp logger stuff, of course).

I also noticed that if logging is enabled for windows via inclusion of the header, strftime in odWriteTime has a format that throws an error (Windows doesn't seem to like %F %T for some reason, even though they are supposed to be valid values).

static void odWriteTime_(FILE * outFile)
{
    char   buffer[80];
    time_t rawtime;
    
    time(&rawtime);
    strftime(buffer, sizeof(buffer), "%F %T ", localtime(&rawtime));
    fputs(buffer, outFile);
} // odWriteTime_

I've changed it to %x %X which corresponds to "14/07/22 4:20:34" (or something like that) and it seems to work fine. I think they "locale specific" which means the date might be in a different format depending on localisation... but probably not a big deal for us at this point.

