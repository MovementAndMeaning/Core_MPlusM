[notation: ‘=‘ universal, ‘+’ channel manager, ‘*’ M+M, ‘@‘ manual]

= use selected inclusion of ODEnableLogging/ODLogging, ODDisableLogging/ODLogging to bracket code that needs to be logged

* change signal handling to use platform-neutral mechanisms

+ on dragging, do an adjustSize() without repaint?

+ if a connection is made outside of the viewer / manager, make sure that a repaint is triggered, not just for a new entity

* ‘touchShare’ protocol with iOS devices?

* Python, Lua, Tcl (, Common Lisp?) services

* integrate Arduino sensors via Linux-based Arduino boards? SmartTag via TouchShare?

* Tunnel Service and Client need to be bidirectional (use nonblocking I/O?)

- check if the SpiderMonkey library can be statically linked on Windows and if this resolves the exit issue; if so, check if it can be statically linked on OS X

= to determine whether a Windows executable is 32-bit or 64-bit, do “c:\Program Files (x86)\Microsoft Visual Studio 12.0\vc\bin\dumpbin.exe /headers the-program-file.exe”

@ add appendix about setting up Hamachi for use with M+M

* add -c/—channel command-line option to report the final channel name, given all arguments

* add ‘arguments’ request to return the command-line arguments that invoked a service, less the path to the service

* use a system-neutral path delimiter when constructing the path to the executable

+ configuration file should have ‘enabled’, ‘name’, ‘arguments’, where ‘enabled’ is 0 if disabled, non-0 if enabled, ‘name’ is the executable name, et cetera - tab-separated

+ ‘load’ a configuration brings up the configuration editor, with a ‘start’ button, ‘edit’ a configuration, ‘save’ a configuration

+ get a list of valid IP addresses and present this as the choice for the server address

+ save the old YARP configuration and restore it on exit from Channel Manager, if a private network was set up - this can be done by the thread exit code for the YARP server
